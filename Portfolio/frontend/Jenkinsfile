pipeline {
    agent any

    environment {
        // Set your Docker image name and optionally, your Docker registry
        DOCKER_IMAGE = 'satyamkant/projectpi-frontend:latest'
        // Uncomment and set if you are pushing to a Docker registry
        // DOCKER_REGISTRY = "your-docker-registry"
    }

    stages {
        stage('Clone Repository') {
            steps {
                echo 'Cloning repository...'
                // Pull the latest code from the GitHub repo
                git url: 'https://github.com/satyamkant/ProjectPi.git', branch: 'main'
            }
        }

        stage('Build React Application') {
            steps {
                echo 'Building React application...'
                // Navigate to the frontend folder and run npm build
                script {
                    dir('Portfolio/frontend') {
                        sh 'npm install'  // Install dependencies
                        sh 'CI=false npm run build'  // Build the React application
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                echo 'Building Docker image...'
                // Build the Docker image from the Dockerfile
                script {
                    dir('Portfolio/frontend') {
                        sh 'docker build -t $DOCKER_IMAGE .'
                    }
                }
            }
        }

        // stage('Push Docker Image') {
        //     when {
        //         expression {
        //             return env.DOCKER_REGISTRY != null && env.DOCKER_REGISTRY != ""
        //         }
        //     }
        //     steps {
        //         echo 'Pushing Docker image to registry...'
        //         script {
        //             // Login to Docker registry (set credentials in Jenkins)
        //             docker.withRegistry("https://${DOCKER_REGISTRY}", 'docker-credentials') {
        //                 sh "docker push $DOCKER_IMAGE"
        //             }
        //         }
        //     }
        // }

        stage('Deploy Docker Container') {
            steps {
                echo 'Deploying Docker container...'
                // Stop any running container with the same name and start the new one
                script {
                    sh '''
                    docker stop projectpi-frontend || true
                    docker rm projectpi-frontend || true
                    docker run -d --name projectpi-frontend -p 81:80 $DOCKER_IMAGE
                    '''
                }
            }
        }
        stage('Cleanup') {
            steps {
                sh 'docker image prune -f'
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()  // Clean the workspace after the pipeline run
        }
        success {
            echo 'Deployment successful.'
        }
        failure {
            echo 'Deployment failed.'
        }
    }
}